# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import filter_pb2 as filter__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in filter_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class StateEstimationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Init = channel.unary_unary(
                '/filter.StateEstimation/Init',
                request_serializer=filter__pb2.InitRequest.SerializeToString,
                response_deserializer=filter__pb2.InitResponse.FromString,
                _registered_method=True)
        self.Reset = channel.unary_unary(
                '/filter.StateEstimation/Reset',
                request_serializer=filter__pb2.ResetRequest.SerializeToString,
                response_deserializer=filter__pb2.ResetResponse.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/filter.StateEstimation/Update',
                request_serializer=filter__pb2.UpdateRequest.SerializeToString,
                response_deserializer=filter__pb2.UpdateResponse.FromString,
                _registered_method=True)
        self.State = channel.unary_unary(
                '/filter.StateEstimation/State',
                request_serializer=filter__pb2.StateRequest.SerializeToString,
                response_deserializer=filter__pb2.StateResponse.FromString,
                _registered_method=True)
        self.Covariance = channel.unary_unary(
                '/filter.StateEstimation/Covariance',
                request_serializer=filter__pb2.CovarianceRequest.SerializeToString,
                response_deserializer=filter__pb2.CovarianceResponse.FromString,
                _registered_method=True)
        self.Noise = channel.unary_unary(
                '/filter.StateEstimation/Noise',
                request_serializer=filter__pb2.NoiseRequest.SerializeToString,
                response_deserializer=filter__pb2.NoiseResponse.FromString,
                _registered_method=True)


class StateEstimationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Init(self, request, context):
        """Initialize Filter
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """Reset Filter
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Filter measurement update
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def State(self, request, context):
        """Filter state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Covariance(self, request, context):
        """Filter covariance
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Noise(self, request, context):
        """Filter noise
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StateEstimationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Init': grpc.unary_unary_rpc_method_handler(
                    servicer.Init,
                    request_deserializer=filter__pb2.InitRequest.FromString,
                    response_serializer=filter__pb2.InitResponse.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=filter__pb2.ResetRequest.FromString,
                    response_serializer=filter__pb2.ResetResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=filter__pb2.UpdateRequest.FromString,
                    response_serializer=filter__pb2.UpdateResponse.SerializeToString,
            ),
            'State': grpc.unary_unary_rpc_method_handler(
                    servicer.State,
                    request_deserializer=filter__pb2.StateRequest.FromString,
                    response_serializer=filter__pb2.StateResponse.SerializeToString,
            ),
            'Covariance': grpc.unary_unary_rpc_method_handler(
                    servicer.Covariance,
                    request_deserializer=filter__pb2.CovarianceRequest.FromString,
                    response_serializer=filter__pb2.CovarianceResponse.SerializeToString,
            ),
            'Noise': grpc.unary_unary_rpc_method_handler(
                    servicer.Noise,
                    request_deserializer=filter__pb2.NoiseRequest.FromString,
                    response_serializer=filter__pb2.NoiseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'filter.StateEstimation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('filter.StateEstimation', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StateEstimation(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filter.StateEstimation/Init',
            filter__pb2.InitRequest.SerializeToString,
            filter__pb2.InitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filter.StateEstimation/Reset',
            filter__pb2.ResetRequest.SerializeToString,
            filter__pb2.ResetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filter.StateEstimation/Update',
            filter__pb2.UpdateRequest.SerializeToString,
            filter__pb2.UpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def State(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filter.StateEstimation/State',
            filter__pb2.StateRequest.SerializeToString,
            filter__pb2.StateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Covariance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filter.StateEstimation/Covariance',
            filter__pb2.CovarianceRequest.SerializeToString,
            filter__pb2.CovarianceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Noise(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filter.StateEstimation/Noise',
            filter__pb2.NoiseRequest.SerializeToString,
            filter__pb2.NoiseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
